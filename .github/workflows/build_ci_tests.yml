name: ci_tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  test_pyproject_install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
    - name: Install dependencies
      run: |
        pip install maturin pytest numpy qoqo
        pip install ./qoqo-qryd
  
  cargo-deny:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        log-level: warn
        command: check
        arguments: --all-features
        command-arguments: ""

  build_maturin_builds_linux:
    needs: deploy_cratesio
    name: maturin_build-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'ubuntu-latest',  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: actions/setup-python@v3.1.2
        with:
          python-version: ${{ matrix.python.py }}
      - name: linux wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          manylinux: 2010
          args: -i python${{ matrix.python.py }} --out wheels --no-sdist -m qoqo-qryd/Cargo.toml --release --cargo-extra-args="--locked"
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
      - name: store artifact
        uses: actions/upload-artifact@v3
        with:
          name: py_wheels
          path: wheels
  
  unittests_check_linux:
    name: unittests_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: "ubuntu-latest",  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
          components: rustfmt
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python.py }}
      - run: |
          cd qoqo-qryd
          python -m pip install numpy
          sudo apt install -y clang-12
          cargo test --workspace --no-default-features
          cargo fmt --all -- --check
  
  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - run: |
          cd qoqo-qryd
          sudo apt install -y clang-12
          cargo clippy -- -D warnings
          cargo clippy --tests -- -D warnings

  doctest_check:
    name: unittests_check-${{ matrix.combinations.runs_on }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          default: true
      - run: |
          cd qoqo-qryd
          cargo test --doc --package=roqoqo-qryd
  
  build_documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
    - name: Install dependencies
      run: |
        sudo apt install texlive-latex-base texlive-latex-recommended texlive-latex-extra latexmk make
        pip install ./qoqo-qryd
        python -m pip install -r ./userdoc/requirements.txt
    - name: build
      run: |
        cd ./userdoc
        make html
        make html
        make latex

  # code_coverage_roqoqo_qryd:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #           toolchain: nightly
  #           components: clippy
  #           override: true
  #     - run: |
  #         cd interfaces/
  #         rustup component add llvm-tools-preview
  #         export RUSTFLAGS="-Zinstrument-coverage"
  #         export RUSTDOCFLAGS="-Zinstrument-coverage"
  #         cargo build --verbose
  #         LLVM_PROFILE_FILE="coverage-%p-%m.profraw" cargo +nightly test --package=roqoqo-qryd --no-default-features
  #         cd roqoqo-qryd/
  #         cargo install grcov
  #         grcov . --binary-path ../target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "cargo" --ignore "/mod.rs" --ignore "/lib.rs" --ignore "*/_auto_generated_operations.rs" --keep-only "src/*" -o lcov.info
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v2
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: lcov.info
  #         flags: unittests
  #         name: codecov-umbrella
  #         fail_ci_if_error: true
  #         verbose: true
